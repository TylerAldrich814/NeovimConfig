local Debug = require("TA.NuiTerm.debug").DEBUG

local NSID = vim.api.nvim_create_namespace("NuiTerm")

vim.cmd([[
  highlight MyBorderNormal guifg=#ffffff guibg=#000000
  highlight MyBorderInsert guifg=#00ff00 guibg=#000000
  highlight MyBorderVisual guifg=#ff0000 guibg=#000000
]])

function GetTermSize()
  local width = vim.o.columns
  local height = vim.o.lines
  return width, height
end

local TermWindow = {
  bufnr     = nil,
  winid     = nil,
  termid    = nil,
  name      = "Terminal",
  autocmdid = nil,
  config    = {},
  onHide    = nil,
  spawned   = false,
}
function TermWindow:IsBufValid()
  local valid =  self.bufnr and vim.api.nvim_buf_is_valid(self.bufnr)
  if not valid then
    Debug("TermWindow:IsBufValid: Bufnr was somehow deleted!")
  end
  return valid
end

-- Function to Create a new Termianl Instance
-- @param termid number: The Terminal's ID
-- @param width number: The width of the terminal window
-- @param height number: The height of the terminal window
-- @param col number: The X coordinate for the floating window
-- @param row number: The Y coordinate for the floating window
function TermWindow:Init(termid, config)
  self.termid = termid
  self.config = config
  local bufnr = vim.api.nvim_create_buf(false, true)
  vim.bo[bufnr].bufhidden = "hide"
  self.bufnr = bufnr
  -- NSID = vim.api.nvim_buf_add_highlight(bufnr, NSID, "FloatBorder", self.config.col, 0, -1)
  -- vim.api.nvim_set_hl_ns(NSID)
  Debug("TermWIndow:Init: NSID " .. NSID)

  return self
end

function TermWindow:RecreateBuf()
  if not self:IsBufValid() then
    local bufnr = vim.api.nvim_create_buf(false, true)
    vim.bo[bufnr].bufhidden = 'wipe'
    self.bufnr = bufnr
    self.spawned = false
  end
end

function TermWindow:SpawnShell(onLeave)
  if self.spawned then
    Debug("TermWindow:SpawnShell: Already spawned")
    return
  end
  vim.fn.termopen(vim.o.shell, {
    on_exit = function()
      onLeave()
    end
  })
  self.spawned = true
end


-- Creats a new Floating window, with the specified window confiurations originally passed
-- to this TermWindow instance wihtin Init
-- returns the window ID generated by nvim_open_win
function TermWindow:Show(onLeave)
  self:RecreateBuf()
  if not self.config then
    Debug("TermWindow:Show(): Self.config is nil")
    return
  end
  Debug("TermWindow: Bufnr - " .. self.bufnr)
  local winid = vim.api.nvim_open_win(self.bufnr, true, self.config)
  self.winid  = winid
  self.onHide = onLeave

  self:SpawnShell()

  Debug("Adding KeyCommands")
  -- When the user moves the focus from the NuiTerm Window to another neovim window,
  -- we call this autocmd. Which in turn calls our 'onLeave' callback, i.e., MainWindow:Hide()
  self.autocmdid = vim.api.nvim_create_autocmd({"WinLeave"}, {
    buffer   = self.bufnr,
    callback = function()
      if winid and vim.api.nvim_win_is_valid(winid) then
        onLeave()
      end
    end
  })
  -- Mode Keymaps
  --- If in 'terminal' mode, Hitting <Esc> will call MainWindow:NormMode -- Putting you into Normal Mode 
  vim.api.nvim_buf_set_keymap(
    self.bufnr,
    't',
    '<Esc>',
    [[<cmd>lua require('TA.NuiTerm').window:NormMode()<CR>]],
    {
      noremap = true,
      silent  = true,
    }
  )
  -- If in 'Normal' mode, Hitting 'i' will call MainWindow:TermMode -- Putting you into TerminalMode
  vim.api.nvim_buf_set_keymap(
    self.bufnr,
    'n',
    'i',
    [[<cmd>lua require('TA.NuiTerm').window:TermMode()<CR>]],
    {
      noremap = true,
      silent  = true,
    }
  )
  -- If in 'Normal' mode, Hitting <Esc> will call MainWindow:Hide() -- Hiding the NuiTerm Window
  vim.api.nvim_buf_set_keymap(
    self.bufnr,
    'n',
    '<Esc>',
    [[<cmd>lua require('TA.NuiTerm').window:Hide()<CR>]],
    {
      noremap = true,
      silent  = true,
    }
  )
  return winid
end

function TermWindow:Hide()
  if not self.winid then
    Debug("TermWindow:Hide(): winid is nil, no Termianl to hide")
    return
  end
  vim.api.nvim_win_hide(self.winid)
  self.winid = nil
end

local MainWindow = {
  winid       = nil,
  initialized = false,
  showing     = false,
  termWindows = {},
  totalTerms  = 0,
  currentTerm = 0
}
function MainWindow:New()
  return self
end

function MainWindow:CreateNewTerm()
  local width, height = GetTermSize()
  local winConfig = {
    relative = "editor",
    width = width,
    height = 20,
    row = height,
    col = 0,
    style = "minimal",
    border = "rounded"
  }
  local newTerm = TermWindow:Init( self.totalTerms, winConfig )

  if not newTerm then
    Debug("NewTerm Failed to Initialize??")
    return
  end
  self.termWindows[self.totalTerms] = newTerm
  self.totalTerms = self.totalTerms+1
end

function MainWindow:Show()
  local currentTerm = self.termWindows[self.currentTerm]
  if not currentTerm then
    self:CreateNewTerm()
    currentTerm = self.termWindows[self.currentTerm]
  end


  local winid = currentTerm:Show(function() self:Hide() end)
  self.winid = winid
  vim.api.nvim_win_set_hl_ns(winid, NSID)
  vim.api.nvim_set_hl(NSID, "FloatBorder", {
    blend = 90,
    fg="#FFFFF0",
  })

  self.showing = true
end

function MainWindow:Hide()
  local currentTerm = self.termWindows[self.currentTerm]
  if not currentTerm then
    Debug("MainWindow:Hide(): No Terminal to Hide")
    return
  end
  currentTerm:Hide()
  self.winid = nil
  self.showing = false
end

function MainWindow:Toggle()
  if not self.showing then
    Debug("Calling Show")
    self:Show()
  else
    Debug("Calling Hide")
    self:Hide()
  end
end


function MainWindow:TermMode()
  Debug("TermMode: NSID: " .. NSID)
  local ns = vim.api.nvim_get_namespaces()["NuiTerm"]
  Debug("NS: " .. ns)

  vim.api.nvim_win_set_hl_ns(self.winid, NSID)
  vim.api.nvim_set_hl(NSID, "FloatBorder", {
    blend = 90,
    fg="#FAAAA0",
  })
  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("i", true, true, true), 'n', true)
end
function MainWindow:NormMode()
  Debug("NormMode: NSID: " .. NSID)
  local ns = vim.api.nvim_get_namespaces()["NuiTerm"]
  Debug("NS: " .. ns)

  vim.api.nvim_win_set_hl_ns(self.winid, NSID)
  vim.api.nvim_set_hl(NSID, "FloatBorder", {
    blend = 00,
    fg="#FFFFF0",
  })
  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<C-\\><C-n>", true, true, true), 'n', true)
end

return {
  MainWindow = MainWindow
}
